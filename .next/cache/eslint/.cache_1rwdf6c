[{"/Users/wff/dev/www/xsurge/Webpage-React/pages/_app.js":"1","/Users/wff/dev/www/xsurge/Webpage-React/pages/disclosures.js":"2","/Users/wff/dev/www/xsurge/Webpage-React/pages/education.js":"3","/Users/wff/dev/www/xsurge/Webpage-React/pages/index.js":"4","/Users/wff/dev/www/xsurge/Webpage-React/pages/onesheet.js":"5","/Users/wff/dev/www/xsurge/Webpage-React/pages/roadmap.js":"6","/Users/wff/dev/www/xsurge/Webpage-React/pages/surgefund.js":"7","/Users/wff/dev/www/xsurge/Webpage-React/pages/updates.js":"8","/Users/wff/dev/www/xsurge/Webpage-React/components/FarmBalanceChecker.js":"9","/Users/wff/dev/www/xsurge/Webpage-React/components/Footer.js":"10","/Users/wff/dev/www/xsurge/Webpage-React/components/NavBar.js":"11","/Users/wff/dev/www/xsurge/Webpage-React/components/SurgeAssetData.js":"12","/Users/wff/dev/www/xsurge/Webpage-React/components/TokenBalanceChecker.js":"13","/Users/wff/dev/www/xsurge/Webpage-React/components/TokenData.js":"14","/Users/wff/dev/www/xsurge/Webpage-React/components/UpdateCard.js":"15","/Users/wff/dev/www/xsurge/Webpage-React/components/VSF.js":"16","/Users/wff/dev/www/xsurge/Webpage-React/components/VST.js":"17"},{"size":631,"mtime":1641106189120,"results":"18","hashOfConfig":"19"},{"size":2514,"mtime":1641107256027,"results":"20","hashOfConfig":"19"},{"size":61892,"mtime":1641107212569,"results":"21","hashOfConfig":"19"},{"size":12801,"mtime":1641109419950,"results":"22","hashOfConfig":"19"},{"size":533,"mtime":1641107217600,"results":"23","hashOfConfig":"19"},{"size":525,"mtime":1641107220160,"results":"24","hashOfConfig":"19"},{"size":7635,"mtime":1641107222476,"results":"25","hashOfConfig":"19"},{"size":2003,"mtime":1641107426245,"results":"26","hashOfConfig":"19"},{"size":20839,"mtime":1641107253397,"results":"27","hashOfConfig":"19"},{"size":2198,"mtime":1641107250063,"results":"28","hashOfConfig":"19"},{"size":3479,"mtime":1641107056345,"results":"29","hashOfConfig":"19"},{"size":2044,"mtime":1639977686410,"results":"30","hashOfConfig":"19"},{"size":11753,"mtime":1641107243963,"results":"31","hashOfConfig":"19"},{"size":2469,"mtime":1641106635197,"results":"32","hashOfConfig":"19"},{"size":535,"mtime":1641106940789,"results":"33","hashOfConfig":"19"},{"size":2432,"mtime":1639977686411,"results":"34","hashOfConfig":"19"},{"size":8166,"mtime":1641107230276,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4pl5eb",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":6,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},"/Users/wff/dev/www/xsurge/Webpage-React/pages/_app.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/pages/disclosures.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/pages/education.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/pages/index.js",["78"],"/Users/wff/dev/www/xsurge/Webpage-React/pages/onesheet.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/pages/roadmap.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/pages/surgefund.js",["79","80"],"import React from \"react\";\nimport NavBar from \"../components/NavBar\";\nimport Footer from \"../components/Footer\";\nimport Button from 'react-bootstrap/Button';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport TokenBalanceChecker from \"../components/TokenBalanceChecker\";\nimport Web3 from 'web3';\nimport {useState, useEffect} from 'react';\nimport Cookies from 'js-cookie'\nimport Spinner from 'react-bootstrap/Spinner';\nimport SURGEFUNDABI from '../components/json/token_abis/surge_fund_abi.json';\n\nconst surgeFundContractAddress = \"0x8078380508c16C9F122D62771714701612Eb3fa8\";\nconst surgeFundABI = SURGEFUNDABI;\nconst web3 = new Web3('https://bsc-dataseed1.binance.org:443');\n\nconst SurgeFund = () => {\n\tconst [captureSurgeFundWalletAddressvalue, setCaptureSurgeFundWalletAddressvalue] = useState(Cookies.get('public_surge_fund_wallet_address'));\n\tconst [checkSurgeFundBalanceButtonSpinnerClass, setCheckSurgeFundBalanceButtonSpinnerClass] = useState(\"hide\");\n\tconst [checkSurgeFundBalanceButtonTextClass, setCheckSurgeFundBalanceButtonTextClass] = useState(\"\");\n\tconst [surgeFundResponse, setSurgeFundResponse] = useState([]);\n\tconst [surgeFundErrorMessage, setSurgeFundErrorMessage] = useState(\"\");\n\tconst [errorMessageClass, setErrorMessageClass] = useState(\"\");\n\n\tconst handleUserInput = (e) => {\n\t\tsetCaptureSurgeFundWalletAddressvalue(e.target.value)\n\t};\n\n\tconst lookupSurgeFundBalances = (ev) => {\n\t\tlet formated_wallet_address = \"\";\n\n\t\tsetCheckSurgeFundBalanceButtonSpinnerClass(\"\");\n\t\tsetCheckSurgeFundBalanceButtonTextClass(\"hide\");\n\n\t\tlet wallet_address = captureSurgeFundWalletAddressvalue;\n\t\t// Check to see if the supplied address is valid/invalid\n\t\ttry {\n\t\t\tformated_wallet_address = web3.utils.toChecksumAddress(wallet_address);\n\t\t} catch(err) {\n\t\t\tsetSurgeFundErrorMessage(\"Supplied wallet address is invalid\");\n\t\t\tsetErrorMessageClass(\"show\");\n\t\t\tsetCheckSurgeFundBalanceButtonSpinnerClass(\"hide\");\n\t\t\tsetCheckSurgeFundBalanceButtonTextClass(\"\");\n\t\t\treturn;\n\t\t}\n\n\t\t// Set Public Wallet Address Cookie\n\t\tCookies.set('public_surge_fund_wallet_address', formated_wallet_address, {expires: 30, path: '/' });\n\n\t\tlet promises = [];\n\t\tlet surge_fund_response = [];\n\t\tlet contract = new web3.eth.Contract(surgeFundABI, surgeFundContractAddress);\n\n\t\tlet get_balance_of = new Promise (function (resolve, reject) {\n\t\t\tcontract.methods.balanceOf(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tpromises.push(get_balance_of);\n\t\tget_balance_of.then(\n\t\t\tdata => {\n\t\t\t\tsurge_fund_response['balance'] = web3.utils.fromWei(data, 'ether');\n\t\t\t}\n\t\t);\n\n\t\tlet bnb_to_claim = new Promise (function (resolve, reject) {\n\t\t\tcontract.methods.bnbToClaimForVictim(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tpromises.push(bnb_to_claim);\n\t\tbnb_to_claim.then(\n\t\t\tdata => {\n\t\t\t\tsurge_fund_response['bnb_to_claim'] = web3.utils.fromWei(data, 'ether');\n\t\t\t}\n\t\t);\n\n\t\tPromise.allSettled(promises).then(\n\t\t\tresult => {\n\t\t\t\tlet can_make_claim = \"No (Your current claim < 0.002 BNB)\";\n\t\t\t\tif (parseFloat(surge_fund_response['balance']) >= .002) {\n\t\t\t\t\tcan_make_claim = \"Yes\";\n\t\t\t\t}\n\n\t\t\t\tlet output = [\n\t\t\t\t\t{\n\t\t\t\t\t\t'balance' : surge_fund_response['balance'],\n\t\t\t\t\t\t'bnb_to_claim' : surge_fund_response['bnb_to_claim'],\n\t\t\t\t\t\t'can_make_claim' : can_make_claim\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t\tconsole.log(output);\n\n\t\t\t\tsetSurgeFundResponse(output);\n\t\t\t\tsetCheckSurgeFundBalanceButtonSpinnerClass(\"hide\");\n\t\t\t\tsetCheckSurgeFundBalanceButtonTextClass(\"\");\n\n\t\t\t}\n\t\t);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<NavBar/>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} sm={12} md={12} lg={12} xl={12} className=\"edLogo\">\n\t\t\t\t\t<Image src=\"assets/img/surge_fund_title.png\" className=\"surgeFundTitle\" />\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col xs={12} sm={12} md={12} lg={6} xl={6} className=\"\">\n\t\t\t\t\t<div className=\"widget tokenList2\">\n\t\t\t\t\t\t<p>To check your current Surge Fund details, please enter your BEP-20 Public Wallet Address below</p>\n\t\t\t\t\t\t<div id=\"token_balance_checker_error_container\" class={errorMessageClass}>\n\t\t\t\t\t\t\t<p id=\"token_balance_checker_error_message\">{surgeFundErrorMessage}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"capture_surge_fund_address_container\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclassName=\"capture_surge_fund_address_input\"\n\t\t\t\t\t\t\t\tid=\"surge_fund_address_input\"\n\t\t\t\t\t\t\t\tvalue={captureSurgeFundWalletAddressvalue}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder=\"Enter BEP-20 Public Wallet Address\"\n\t\t\t\t\t\t\t\tonChange={handleUserInput}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div id=\"capture_token_balance_button\" onClick={(ev) => lookupSurgeFundBalances(ev)}>\n\t\t\t\t\t\t\t\t<Spinner size=\"sm\" id=\"balance_check_button_spinner\" className={checkSurgeFundBalanceButtonSpinnerClass} animation=\"border\" role=\"status\">\n\t\t\t\t\t\t\t\t\t<span className=\"visually-hidden\">Loading...</span>\n\t\t\t\t\t\t\t\t</Spinner>\n\t\t\t\t\t\t\t\t<span id=\"check_balance_button_text\" class={checkSurgeFundBalanceButtonTextClass}>\n\t\t\t\t\t\t\t\t\tCheck\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{!surgeFundResponse ? \"\" :\n\t\t\t\t\t\t\t<div id=\"token_balance_display_container\">\n\t\t\t\t\t\t\t\t{surgeFundResponse.map((data) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t<fieldset className=\"token_balance_wrapper_fieldset\">\n\t\t\t\t\t\t\t\t\t\t\t\t<legend align=\"center\">SurgeFund Details</legend>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tYour current SurgeFund BNB balance\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{data.balance}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBNB you have left to claim\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{data.bnb_to_claim}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCan Make A Claim?\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{data.can_make_claim}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t<p id=\"token_balance_disclaimer\">*Data provided by BSC</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</Col>\n\t\t\t\t<Col xs={12} sm={12} md={12} lg={6} xl={6} className=\"edText surge_fund_text\">\n\t\t\t\t\t<p>The SurgeFund is XSurge's attempt to pay back the money that was lost in the SurgeBNB hack occurring on August 16th, 2021. Shortly after notifying the community to pull out of the contract due to a security vulnerability, SurgeBNB was exploited for $5M in BNB. The leadership team and Mark conducted a thorough investigation to determine the culprit and follow the money trail. Authorities were notified by a legal representative of the XSurge team and outside agencies were were hired to help. Unfortunately, the money could not be tracked and recovered. Mark and the team put together a Charitable Donation Fund for everyone who lost the money known as the SurgeFund shortly after.</p>\n\t\t\t\t\t<p>To learn more about the SurgeBNB hack, The SurgeFund and how to claim, please visit our Surge Education Page</p>\n\t\t\t\t\t<Button className=\"dApp btnDApp learn_more surge_fund_learn_more_button\">\n\t\t\t\t\t\t<a href=\"#/education\">Surge Education</a>\n\t\t\t\t\t</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Footer/>\n\t\t</div>\n\t);\n};\n\nexport default SurgeFund","/Users/wff/dev/www/xsurge/Webpage-React/pages/updates.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/components/FarmBalanceChecker.js",["81","82","83","84","85","86","87","88"],"import React from 'react';\nimport { Component } from 'react';\nimport Cookies from 'js-cookie'\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport * as SurgeAssets from './SurgeAssetData.js';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://bsc-dataseed1.binance.org:443');\n\nconst farms = SurgeAssets.getSurgeFarmsData();\n\nclass FarmBalanceChecker extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\terror_message_class: \"\",\n\t\t\tfarm_balance_error_message: \"\",\n\t\t\tfarm_balance_container_class: \"\",\n\t\t\tcheck_farm_balance_button_spinner_class: \"hide\",\n\t\t\tcheck_farm_balance_button_text_class: \"\",\n\t\t\tselectedFarmByUser: false,\n\t\t\tselectedFarm: \"\",\n\t\t\tfarm_balance_response: false,\n\t\t\tcheck_farm_balance_button_text: \"\",\n\t\t\tcapture_farm_balance_input_placeholder: \"\",\n\t\t\tcapture_farm_balance_input_value: \"\"\n\t\t};\n\t}\n\n\tfarmChange = (e) => {\n\t\tthis.setState({\n\t\t\tfarm_balance_response: false,\n\t\t\terror_message_class: \"\",\n\t\t\tfarm_balance_container_class: \"show\",\n\t\t\tcapture_farm_balance_input_value: \"\",\n\t\t\tselectedFarmByUser: true\n\t\t});\n\n\t\tlet farmSymbol = e.target.value;\n\t\tlet button_text = \"\";\n\t\tlet balance_container_input_id = \"\";\n\t\tlet balance_container_input_type = \"\";\n\t\tlet input_placeholder = \"\";\n\t\tlet token_balance_input_value = \"\";\n\n\t\tif (farmSymbol === \"0\") {\n\t\t\tthis.setState({\n\t\t\t\tselectedFarmByUser: false,\n\t\t\t\tfarm_balance_container_class: \"\"\n\t\t\t});\n\t\t\treturn\n\t\t} else {\n\t\t\tbutton_text = \"Check\";\n\t\t\tinput_placeholder = \"Enter BEP-20 Public Wallet Address\";\n\t\t\tlet public_wallet_address = Cookies.get('public_wallet_address');\n\t\t\tlet farm_balance_input_value = \"\"\n\t\t\tif (public_wallet_address != undefined) {\n\t\t\t\tfarm_balance_input_value = public_wallet_address;\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tcheck_farm_balance_button_text: button_text,\n\t\t\t\tselectedFarm: farmSymbol,\n\t\t\t\tcapture_farm_balance_input_placeholder: input_placeholder,\n\t\t\t\tcapture_farm_balance_input_value: farm_balance_input_value\n\t\t\t});\n\t\t}\n\t}\n\n\trenderCheckFarmBalancesView = () => {\n\t\tif (this.state.selectedFarmByUser && this.state.selectedFarm !== \"0\") {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\n\tlookupFarmBalances = (ev) => {\n\t\t// Reset states\n\t\tthis.setState({\n\t\t\terror_message_class: \"\",\n\t\t\tcheck_farm_balance_button_spinner_class: \"\",\n\t\t\tcheck_farm_balance_button_text_class: \"hide\"\n\t\t});\n\t\t\n\t\tlet promises = [];\n\t\tlet wallet_response = {};\n\t\tlet farms_to_check = [];\n\t\tlet formated_wallet_address = \"\";\n\t\tlet wallet_address = this.state.capture_farm_balance_input_value;\n\n\t\t// Check to see if the supplied address is valid/invalid\n\t\ttry {\n\t\t\tformated_wallet_address = web3.utils.toChecksumAddress(wallet_address);\n\t\t\tif (formated_wallet_address.length == 0) {\n\t\t\t\tthrow \"Supplied wallet address is invalid\";\n\t\t\t}\n\t\t} catch(err) {\n\t\t\tthis.setState({\n\t\t\t\tfarm_balance_error_message: \"Supplied wallet address is invalid\",\n\t\t\t\terror_message_class: \"show\",\n\t\t\t\tcheck_farm_balance_button_spinner_class: \"hide\",\n\t\t\t\tcheck_farm_balance_button_text_class: \"\"\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.state.selectedFarm == \"all\") {\n\t\t\tfarms_to_check = farms;\n\t\t} else {\n\t\t\tfor (const farm in farms) {\n\t\t\t\tif (this.state.selectedFarm == farms[farm]['symbol']) {\n\t\t\t\t\tfarms_to_check.push(farms[farm]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Set Public Wallet Address Cookie\n\t\tCookies.set('public_wallet_address', formated_wallet_address, {expires: 30, path: '/' });\n\n\t\tfor (const farm in farms_to_check) {\n\t\t\twallet_response[farms_to_check[farm][\"name\"]] = {\n\t\t\t\t'symbol': farms_to_check[farm]['symbol'],\n\t\t\t\t'paired_asset': farms_to_check[farm]['paired_asset'],\n\t\t\t\t'split_rewards': farms_to_check[farm]['split_rewards'],\n\t\t\t\t'is_paired_asset_surge_token': farms_to_check[farm]['is_paired_asset_surge_token']\n\t\t\t};\n\t\t\t\n\t\t\tlet contract = new web3.eth.Contract(farms_to_check[farm][\"abi\"], farms_to_check[farm][\"address\"]);\n\n\t\t\t// Get farm token balance\n\t\t\tlet balance_of = new Promise (function (resolve, reject) {\n\t\t\t\tcontract.methods.balanceOf(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(balance_of);\n\t\t\tbalance_of.then(\n\t\t\t\tdata => {\n\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['farm_tokens'] = web3.utils.fromWei(data, farms_to_check[farm][\"wei_unit\"]);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Get farm redeemable value balance\n\t\t\tlet redeemable_value = new Promise (function (resolve, reject) {\n\t\t\t\tcontract.methods.getRedeemableValue(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(redeemable_value);\n\t\t\tredeemable_value.then(\n\t\t\t\tdata => {\n\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['xusd_value'] = web3.utils.fromWei(data[0], farms_to_check[farm][\"wei_unit\"]);\n\t\t\t\t\tif (farms_to_check[farm][\"is_paired_asset_surge_token\"]) {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['paired_asset_value'] = data[1];\n\t\t\t\t\t} else {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['paired_asset_value'] = web3.utils.fromWei(data[1], farms_to_check[farm][\"paired_asset_wei_unit\"]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Get farm time until unlock\n\t\t\tlet time_until_unlock = new Promise (function (resolve, reject) {\n\t\t\t\tcontract.methods.getTimeUntilUnlock(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(time_until_unlock);\n\t\t\ttime_until_unlock.then(\n\t\t\t\tdata => {\n\t\t\t\t\tlet formated_time_until_unlock = (data*3)/60/60/24\n\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['time_until_unlock'] = formated_time_until_unlock;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Get farm pending rewards\n\t\t\tlet pending_rewards = new Promise (function (resolve, reject) {\n\t\t\t\tcontract.methods.pendingRewards(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(pending_rewards);\n\t\t\tpending_rewards.then(\n\t\t\t\tdata => {\n\t\t\t\t\tif (!farms_to_check[farm][\"split_rewards\"]) {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['pending_rewards_xusd'] = web3.utils.fromWei(data, farms_to_check[farm][\"wei_unit\"]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['pending_rewards_xusd'] = web3.utils.fromWei(data[0], farms_to_check[farm][\"wei_unit\"]);\n\t\t\t\t\t\tif (farms_to_check[farm][\"is_paired_asset_surge_token\"]) {\n\t\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['pending_rewards_paired_asset'] = data[1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['pending_rewards_paired_asset'] = web3.utils.fromWei(data[1], farms_to_check[farm][\"paired_asset_wei_unit\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Get farm total rewards claimed\n\t\t\tlet total_rewards_claimed = new Promise (function (resolve, reject) {\n\t\t\t\tcontract.methods.totalRewardsClaimedForUser(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(total_rewards_claimed);\n\t\t\ttotal_rewards_claimed.then(\n\t\t\t\tdata => {\n\t\t\t\t\tconsole.log()\n\t\t\t\t\tif (!farms_to_check[farm][\"split_rewards\"]) {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['total_rewards_claimed_xusd'] = web3.utils.fromWei(data, farms_to_check[farm][\"wei_unit\"]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['total_rewards_claimed_xusd'] = web3.utils.fromWei(data[0], farms_to_check[farm][\"wei_unit\"]);\n\t\t\t\t\t\tif (farms_to_check[farm][\"is_paired_asset_surge_token\"]) {\n\t\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['total_rewards_claimed_paired_asset'] = data[1];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['total_rewards_claimed_paired_asset'] = web3.utils.fromWei(data[1], farms_to_check[farm][\"paired_asset_wei_unit\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// get xUSD contract price\n\t\t\tlet xusd_token_data = SurgeAssets.getSurgeTokenData('xUSD');\n\t\t\tlet xusd_contract = new web3.eth.Contract(xusd_token_data['abi'], xusd_token_data['address']);\n\t\t\tlet current_xusd_price = new Promise (function (resolve, reject) {\n\t\t\t\txusd_contract.methods.calculatePrice().call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(current_xusd_price);\n\t\t\tcurrent_xusd_price.then(\n\t\t\t\tdata => {\n\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['xusd_contract_price'] = web3.utils.fromWei(data, xusd_token_data[\"wei_unit\"]);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// get paired asset prices\n\t\t\tlet base_url = \"https://api.coingecko.com/api/v3/simple/token_price/binance-smart-chain?contract_addresses={paired_asset_bsc_address}&vs_currencies=usd\";\n\t\t\tif (!farms_to_check[farm][\"is_paired_asset_surge_token\"]) {\n\t\t\t\tbase_url = base_url.replace('{paired_asset_bsc_address}', farms_to_check[farm]['paired_asset_token_address']);\n\t\t\t\tlet request = fetch(base_url).then(response => response.text()).then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\tlet data_obj = JSON.parse(data);\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['paired_asset_price'] = data_obj[farms_to_check[farm][\"paired_asset_token_address\"]]['usd'];\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tpromises.push(request);\n\t\t\t} else {\n\t\t\t\tlet paired_surge_token_data = SurgeAssets.getSurgeTokenData(farms_to_check[farm]['surge_token']);\n\n\t\t\t\tbase_url = base_url.replace('{paired_asset_bsc_address}', paired_surge_token_data['uassetaddress']);\n\t\t\t\tlet request = fetch(base_url).then(response => response.text()).then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\tlet data_obj = JSON.parse(data);\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['paired_asset_price'] = data_obj[paired_surge_token_data['uassetaddress']]['usd'];\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tpromises.push(request);\n\n\t\t\t\tlet surge_contract = new web3.eth.Contract(paired_surge_token_data[\"abi\"], paired_surge_token_data[\"address\"]);\n\n\t\t\t\tlet surge_token_price_call = new Promise (function (resolve, reject) {\n\t\t\t\t\tsurge_contract.methods.calculatePrice().call({}, function(error, result) {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tpromises.push(surge_token_price_call);\n\t\t\t\tsurge_token_price_call.then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\twallet_response[farms_to_check[farm][\"name\"]]['surge_token_price'] = web3.utils.fromWei(data, paired_surge_token_data['wei_unit'])\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tPromise.allSettled(promises).then(\n\t\t\tresult => {\n\t\t\t\tconsole.log(wallet_response);\n\t\t\t\tlet output = [];\n\t\t\t\tfor (const k in wallet_response) {\n\t\t\t\t\tif (wallet_response[k]['farm_tokens'] > 0) {\n\t\t\t\t\t\tlet farm_lp_balance_xusd = parseFloat(wallet_response[k]['xusd_value']);\n\t\t\t\t\t\tlet farm_lp_xusd_value = farm_lp_balance_xusd * parseFloat(wallet_response[k]['xusd_contract_price']);\n\t\t\t\t\t\t\n\t\t\t\t\t\tlet farm_lp_balance_paired_asset = parseFloat(wallet_response[k]['paired_asset_value']);\n\t\t\t\t\t\tlet farm_lp_paired_asset_value = 0;\n\t\t\t\t\t\tif (!wallet_response[k][\"is_paired_asset_surge_token\"]) {\n\t\t\t\t\t\t\tfarm_lp_paired_asset_value = farm_lp_balance_paired_asset * parseFloat(wallet_response[k]['paired_asset_price']);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfarm_lp_paired_asset_value = farm_lp_balance_paired_asset * parseFloat(wallet_response[k]['surge_token_price']) * parseFloat(wallet_response[k]['paired_asset_price']);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet total_lp_farm_value = farm_lp_xusd_value + farm_lp_paired_asset_value;\n\n\t\t\t\t\t\tlet pending_rewards_xusd = parseFloat(wallet_response[k]['pending_rewards_xusd']);\n\t\t\t\t\t\tlet pending_rewards_xusd_usd = pending_rewards_xusd * parseFloat(wallet_response[k]['xusd_contract_price']);\n\n\t\t\t\t\t\tlet pending_rewards_paired_asset = 0;\n\t\t\t\t\t\tlet pending_rewards_paired_asset_usd = 0;\n\t\t\t\t\t\tif (wallet_response[k][\"is_paired_asset_surge_token\"]) {\n\t\t\t\t\t\t\tpending_rewards_paired_asset = parseFloat(wallet_response[k]['pending_rewards_paired_asset']);\n\t\t\t\t\t\t\tpending_rewards_paired_asset_usd = pending_rewards_paired_asset * parseFloat(wallet_response[k]['surge_token_price']) * parseFloat(wallet_response[k]['paired_asset_price']);\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t\tlet rewards_view = \"\";\n\t\t\t\t\t\tif (wallet_response[k]['split_rewards']) {\n\t\t\t\t\t\t\trewards_view = this.buildSplitRewardsView(\n\t\t\t\t\t\t\t\tpending_rewards_xusd,\n\t\t\t\t\t\t\t\tpending_rewards_xusd_usd,\n\t\t\t\t\t\t\t\tpending_rewards_paired_asset,\n\t\t\t\t\t\t\t\tpending_rewards_paired_asset_usd,\n\t\t\t\t\t\t\t\twallet_response[k]['paired_asset'],\n\t\t\t\t\t\t\t\twallet_response[k]['total_rewards_claimed_xusd'],\n\t\t\t\t\t\t\t\twallet_response[k]['total_rewards_claimed_paired_asset']\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trewards_view = this.buildRewardsView(\n\t\t\t\t\t\t\t\tpending_rewards_xusd,\n\t\t\t\t\t\t\t\tpending_rewards_xusd_usd,\n\t\t\t\t\t\t\t\twallet_response[k]['total_rewards_claimed_xusd']\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toutput.push({\n\t\t\t\t\t\t\t'name' : k,\n\t\t\t\t\t\t\t'symbol' : wallet_response[k]['symbol'],\n\t\t\t\t\t\t\t'paired_asset': wallet_response[k]['paired_asset'],\n\t\t\t\t\t\t\t'split_rewards': wallet_response[k]['split_rewards'],\n\t\t\t\t\t\t\t'farm_tokens' : parseFloat(wallet_response[k]['farm_tokens']).toFixed(5),\n\t\t\t\t\t\t\t'farm_lp_balance_xusd': farm_lp_balance_xusd.toLocaleString(undefined, {maximumFractionDigits: 5}),\n\t\t\t\t\t\t\t'farm_lp_balance_paired_asset': farm_lp_balance_paired_asset.toLocaleString(undefined, {maximumFractionDigits: 5}),\n\t\t\t\t\t\t\t'farm_lp_value_usd': total_lp_farm_value.toLocaleString(undefined, {style: \"currency\", currency: \"USD\"}),\n\t\t\t\t\t\t\t'time_until_unlock': Math.round(wallet_response[k]['time_until_unlock']),\n\t\t\t\t\t\t\t'rewards_view': rewards_view,\n\t\t\t\t\t\t\t'pending_rewards_xusd': pending_rewards_xusd.toFixed(5),\n\t\t\t\t\t\t\t'pending_rewards_paired_asset': pending_rewards_paired_asset,\n\t\t\t\t\t\t\t'pending_rewards_usd': pending_rewards_xusd_usd.toLocaleString(undefined, {style: \"currency\", currency: \"USD\"}),\n\t\t\t\t\t\t\t'total_rewards_claimed': parseFloat(wallet_response[k]['total_rewards_claimed_xusd']).toFixed(5)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setState({\n\t\t\t\t\tfarm_balance_response: output,\n\t\t\t\t\tcheck_farm_balance_button_spinner_class: \"hide\",\n\t\t\t\t\tcheck_farm_balance_button_text_class: \"\"\n\t\t\t\t});\n\n\t\t\t\tconsole.log(output);\n\t\t\t}\n\t\t);\n\t}\n\n\tbuildSplitRewardsView = (\n\t\tpending_rewards_xusd, \n\t\tpending_rewards_xusd_usd, \n\t\tpending_rewards_paired_asset, \n\t\tpending_rewards_paired_asset_usd, \n\t\tpaired_asset,\n\t\ttotal_rewards_claimed_xusd,\n\t\ttotal_rewards_claimed_paired_asset) => {\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"farm_balance_wrapper_left\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tPending Rewards (xUSD)\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{pending_rewards_xusd.toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"farm_balance_wrapper_right\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tPending Rewards ({paired_asset})\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{pending_rewards_paired_asset.toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t<div className=\"farm_balance_spacer\"></div>\n\n\t\t\t\t<div className=\"farm_balance_amount_wrapper\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tPending Rewards (USD)\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{(pending_rewards_xusd_usd + pending_rewards_paired_asset_usd).toLocaleString(undefined, {style: \"currency\", currency: \"USD\"})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"farm_balance_spacer\"></div>\n\n\t\t\t\t<div className=\"farm_balance_wrapper_left\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tTotal Claimed (xUSD)\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{parseFloat(total_rewards_claimed_xusd).toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"farm_balance_wrapper_right\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tTotal Claimed ({paired_asset})\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{parseFloat(total_rewards_claimed_paired_asset).toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"clear\"></div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tbuildRewardsView = (pending_rewards_xusd, pending_rewards_xusd_usd, total_rewards_claimed_xusd) => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"farm_balance_wrapper_left\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tPending Rewards (xUSD)\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{pending_rewards_xusd.toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"farm_balance_wrapper_right\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tPending Rewards (USD)\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{pending_rewards_xusd_usd.toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t<div className=\"farm_balance_spacer\"></div>\n\t\t\t\t<div className=\"farm_balance_amount_wrapper\">\n\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\tTotal Claimed (xUSD)\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t{parseFloat(total_rewards_claimed_xusd).toLocaleString(undefined, {maximumFractionDigits: 5})}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\thandleUserInput = (e) => {\n\t\tthis.setState({\n\t\t\tcapture_farm_balance_input_value: e.target.value\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"widget spacerToken tokenList2\">\n\t\t\t\t<div id=\"farm_balance_checker_error_container\" class={this.state.error_message_class}>\n\t\t\t\t\t<p id=\"farm_balance_checker_error_message\">{this.state.farm_balance_error_message}</p>\n\t\t\t\t</div>\n\t\t\t\t<Form.Select className=\"farmSelect\" onChange={(ev) => this.farmChange(ev)}>\n\t\t\t\t\t<option value=\"0\" defaultValue>Select a Farm</option>\n\t\t\t\t\t{farms.map((farm) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<option key={farm.symbol} value={farm.symbol}>{farm.name}</option>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Form.Select>\n\n\t\t\t\t<div class={this.state.farm_balance_container_class} id=\"farm_balance_container\">\n\t\t\t\t\t{!this.renderCheckFarmBalancesView() ? \"\" :\n\t\t\t\t\t\t<div id=\"capture_farm_balance_container\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclassName=\"capture_farm_balance_input\" \n\t\t\t\t\t\t\t\tid=\"capture_farm_wallet_address\"\n\t\t\t\t\t\t\t\tvalue={this.state.capture_farm_balance_input_value}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tplaceholder={this.state.capture_farm_balance_input_placeholder}\n\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div id=\"capture_farm_balance_button\" onClick={(ev) => this.lookupFarmBalances(ev)}>\n\t\t\t\t\t\t\t\t<Spinner size=\"sm\" id=\"balance_check_button_spinner\" className={this.state.check_farm_balance_button_spinner_class} animation=\"border\" role=\"status\">\n\t\t\t\t\t\t\t\t\t<span className=\"visually-hidden\">Loading...</span>\n\t\t\t\t\t\t\t\t</Spinner>\n\t\t\t\t\t\t\t\t<span id=\"check_farm_balance_button_text\" class={this.state.check_farm_balance_button_text_class}>\n\t\t\t\t\t\t\t\t\t{this.state.check_farm_balance_button_text}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\n\t\t\t\t\t{!this.state.farm_balance_response ? \"\" :\n\t\t\t\t\t\t<div id=\"farm_balance_display_container\">\n\t\t\t\t\t\t\t{this.state.farm_balance_response.map((farm) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_wrapper\">\n\t\t\t\t\t\t\t\t\t\t<fieldset className=\"farm_balance_wrapper_fieldset\">\n\t\t\t\t\t\t\t\t\t\t\t<legend align=\"center\">{farm.symbol}</legend>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tCurrent Balance (Farm Tokens)\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{farm.farm_tokens}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_wrapper_left\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tLP Balance (xUSD)\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{farm.farm_lp_balance_xusd}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_wrapper_right\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tLP Balance ({farm.paired_asset})\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{farm.farm_lp_balance_paired_asset}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_spacer\"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tLP Value (USD)\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{farm.farm_lp_value_usd}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"farm_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"fieldset_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tTime Until Unlock\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{farm.time_until_unlock} days\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t{farm.rewards_view}\n\t\t\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t<p id=\"farm_balance_disclaimer\">*Data provided by BSC and CoinGecko API's</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default FarmBalanceChecker;","/Users/wff/dev/www/xsurge/Webpage-React/components/Footer.js",["89","90","91","92","93","94","95","96"],"import { Component } from 'react';\n// import {LinkContainer} from 'react-router-bootstrap';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\n\nclass Footer extends Component{\n\trender(){\n\t\treturn (\n\t\t\t\t<footer id=\"footer\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col xs={12} sm={12} md={6} className=\"text-center text-md-start order-last order-md-first mt-5px\" id=\"copyright_links\">\n\t\t\t\t\t\t\t© 2021 xSurge. All rights reserved.\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t<Col xs={12} sm={12} md={6} className=\"text-center text-md-end\" id=\"footer_social_links_container\">\n\t\t\t\t\t\t\t<a href=\"https://discord.gg/XSURGE\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<Image src=\"assets/img/discord.png\" className=\"footer-image\" id=\"footer_social_first\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"https://instagram.com/XSURGEDEFI\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<Image src=\"assets/img/instagram.png\" className=\"footer-image\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"https://twitter.com/XSURGEDEFI\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<Image src=\"assets/img/twitter.png\" className=\"footer-image\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"https://www.reddit.com/r/XSURGE\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<Image src=\"assets/img/reddit.png\" className=\"footer-image\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"https://t.me/XSURGEDEFI\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<Image src=\"assets/img/telegram.png\" className=\"footer-image\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<a href=\"https://www.facebook.com/groups/XSURGEDEFI\" target=\"_blank\">\n\t\t\t\t\t\t\t\t<Image src=\"assets/img/facebook.png\" className=\"footer-image\" id=\"footer_social_last\" />\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{/* <div className=\"clear\"></div> */}\n\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col xs={12} sm={12} md={12} lg={12} xl={12}>\n\t\t\t\t\t\t\t<div className=\"text-center text-md-start mt-5px\" id=\"disclosure_text\">\n\t\t\t\t\t\t\t\t<div className=\"LinkContainer\" to=\"/disclosures\" className=\"disclosure_link\">\n\t\t\t\t\t\t\t\t\t<span id=\"disclosure_text_span\">Disclosures</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<span> | </span>\n\t\t\t\t\t\t\t\t<div className=\"LinkContainer\" to=\"/disclosures\" className=\"disclosure_link\">\n\t\t\t\t\t\t\t\t\t<span id=\"disclosure_text_span\">*Surge Price</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t</footer>\n\t\t)\n\t}\n}\n\nexport default Footer;","/Users/wff/dev/www/xsurge/Webpage-React/components/NavBar.js",["97"],"import React, {Component} from \"react\";\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\n//import { Component } from 'react';\n//import { HashLink, NavHashLink } from 'react-router-hash-link';\nimport Link from 'next/link';\nimport Image from 'react-bootstrap/Image';\n\nclass NavBar extends Component {\n    render(){\n        return (\n            <Navbar collapseOnSelect expand=\"xxl\" bg=\"dark\" variant=\"dark\">\n                    <div className=\"LinkContainer\" href=\"/\">\n                        <Navbar.Brand href=\"/\">\n                            <img\n                            alt=\"\"\n                            src=\"assets/img/xsurgenew.png\"\n                            className=\"d-inline-block align-top logoNav1\"\n                            />\n                        </Navbar.Brand>\n                    </div>\n                    \n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\n                        <Nav className=\"justify-content-end\" style={{ width: \"100%\" }}>\n                            <Link className=\"nav-link\" href=\"/#surge-assets\">Surge Assets</Link>\n\t\t\t\t\t\t\t<Link className=\"nav-link\" href=\"/#how-to-buy\">How To Buy</Link>\n\t\t\t\t\t\t\t<NavDropdown title=\"Tools\" id=\"basic-nav-dropdown\">\n                                <Link className=\"nav-link\" href=\"/#surge-balance-checker\">Balance Checker</Link>\n                            </NavDropdown>\n\t\t\t\t\t\t\t<div className=\"LinkContainer\" href=\"/surgefund\">\n                                <Nav.Link>Surge Fund</Nav.Link>\n                            </div>\n\t\t\t\t\t\t\t<div className=\"LinkContainer\" href=\"/education\">\n                                <Nav.Link>Surge Education</Nav.Link>\n                            </div>\n                            <Nav.Link href=\"https://xsurgemerch.com/\">Store</Nav.Link>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<NavDropdown title=\"About\" id=\"basic-nav-dropdown\">\n                                <NavDropdown.Item target=\"_blank\" href=\"assets/xsurge-whitepaper.pdf\">Whitepaper</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item href=\"#/onesheet\">One Sheet</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item href=\"#/roadmap\">Road Map</NavDropdown.Item>\n                            </NavDropdown>\n\n\t\t\t\t\t\t\t<div className=\"LinkContainer\" href=\"/updates\">\n                                <Nav.Link>Updates</Nav.Link>\n                            </div>\n\n\t\t\t\t\t\t\t{/* <Nav.Link target=\"_blank\" href=\"assets/xsurge-whitepaper.pdf\">Whitepaper</Nav.Link>\n\t\t\t\t\t\t\t<div className=\"LinkContainer\" href=\"/onesheet\">\n                                <Nav.Link>One Sheet</Nav.Link>\n                            </div>\n\t\t\t\t\t\t\t<div className=\"LinkContainer\" href=\"/roadmap\">\n                                <Nav.Link>Road Map</Nav.Link>\n                            </div>\n                           </div>*/}\n\n                            <Nav.Link className=\"dApp\" href=\"https://app.xsurge.net\">\n                            <img\n                            alt=\"\"\n                            src=\"assets/img/appicon.png\"\n                            className=\"d-inline-block align-middle appicon\"\n                            />Go to dApp</Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                    \n            </Navbar>\n        )\n    }\n    \n}\n\nexport default NavBar;","/Users/wff/dev/www/xsurge/Webpage-React/components/SurgeAssetData.js",["98","99"],"import SUSDJSON from './json/token_abis/surge_usd_abi.json';\nimport SETHJSON from './json/token_abis/surge_eth_abi.json';\nimport SBTCJSON from './json/token_abis/surge_btc_abi.json';\nimport SADAJSON from './json/token_abis/surge_ada_abi.json';\nimport SUSLSJSON from './json/token_abis/surge_useless_abi.json';\nimport XUSDJSON from './json/token_abis/surge_xusd_abi.json';\nimport BNBXUSDFARM from './json/farm_abis/bnb_xusd_farm_abi.json';\nimport SBTCXUSDFARM from './json/farm_abis/sbtc_xusd_farm_abi.json';\nimport SADAXUSDFARM from './json/farm_abis/sada_xusd_farm_abi.json';\nimport SUSELESSXUSDFARM from './json/farm_abis/suseless_xusd_farm_abi.json';\nimport SurgeTokensData from './json/surge_tokens.json';\nimport SurgeFarmsData from './json/surge_farms.json';\n\nconst SurgeTokens = SurgeTokensData;\nconst SurgeFarms = SurgeFarmsData;\nconst SurgeTokensCache = {};\nconst SurgeFarmsCache = {};\n\nconst abiObj = {\n\tSUSDJSON: SUSDJSON,\n\tSETHJSON: SETHJSON,\n\tSBTCJSON: SBTCJSON,\n\tSADAJSON: SADAJSON,\n\tSUSLSJSON: SUSLSJSON,\n\tBNBxUSDFARM: BNBXUSDFARM,\n\tSBTCxUSDFARM: SBTCXUSDFARM,\n\tSADAxUSDFARM: SADAXUSDFARM,\n\tSUSELESSxUSDFARM: SUSELESSXUSDFARM,\n\tXUSDJSON: XUSDJSON,\n}\n\nexport function getSurgeTokensData() {\n\tfor (const token in SurgeTokens) {\n\t\tSurgeTokens[token]['abi'] = abiObj[SurgeTokens[token]['abi_name']];\n\t\tSurgeTokensCache[SurgeTokens[token]['name']] = SurgeTokens[token];\n\t}\n\n\treturn SurgeTokens;\n}\n\nexport function getSurgeTokenData(token) {\n\tif (Object.keys(SurgeTokensCache).length == 0) {\n\t\tgetSurgeTokensData();\n\t}\n\n\tif (token in SurgeTokensCache) {\n\t\treturn SurgeTokensCache[token];\n\t}\n\n\treturn {};\n}\n\nexport function getSurgeFarmsData() {\n\tfor (const farm in SurgeFarms) {\t\t\n\t\tSurgeFarms[farm]['abi'] = abiObj[SurgeFarms[farm]['abi_name']];\n\t\tSurgeFarmsCache[SurgeFarms[farm]['name']] = SurgeFarms[farm];\n\t}\n\n\treturn SurgeFarms;\n}\n\nexport function getSurgeFarmData(farm) {\n\tif (Object.keys(SurgeFarmsCache).length == 0) {\n\t\tgetSurgeFarmsData();\n\t}\n\n\tif (farm in SurgeFarmsCache) {\n\t\treturn SurgeFarmsCache[farm];\n\t}\n\n\treturn {};\n}","/Users/wff/dev/www/xsurge/Webpage-React/components/TokenBalanceChecker.js",["100","101","102","103","104","105","106","107"],"import React from 'react';\nimport ReactDOM from 'react-dom'\nimport { Component } from 'react';\nimport Cookies from 'js-cookie'\nimport Form from 'react-bootstrap/Form';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Button from 'react-bootstrap/Button';\nimport {getSurgeTokensData} from './SurgeAssetData.js';\nimport Web3 from 'web3';\n\nconst web3 = new Web3('https://bsc-dataseed1.binance.org:443');\n\nconst tokens = getSurgeTokensData();\n\nclass TokenBalanceChecker extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\terror_message_class: \"\",\n\t\t\ttoken_balance_error_message: \"\",\n\t\t\ttoken_balance_container_class: \"\",\n\t\t\tcheck_balance_button_spinner_class: \"hide\",\n\t\t\tcheck_balance_button_text_class: \"\",\n\t\t\tselectedTokenByUser: false,\n\t\t\tselectedToken: \"\",\n\t\t\ttoken_balance_response: false,\n\t\t\tcheck_balance_button_text: \"\",\n\t\t\tcapture_token_balance_container_input_id: \"\",\n\t\t\tcapture_token_balance_container_input_type: \"\",\n\t\t\tcapture_token_balance_input_placeholder: \"\",\n\t\t\tcapture_token_balance_input_value: \"\"\n\t\t};\n\t}\n\n\ttokenChange = (e) => {\n\t\tthis.setState({\n\t\t\ttoken_balance_response: false,\n\t\t\terror_message_class: \"\",\n\t\t\ttoken_balance_container_class: \"show\",\n\t\t\tcapture_token_balance_input_value: \"\",\n\t\t\tselectedTokenByUser: true\n\t\t});\n\n\t\tlet tokenSymbol = e.target.value;\n\t\tlet button_text = \"\";\n\t\tlet balance_container_input_id = \"\";\n\t\tlet balance_container_input_type = \"\";\n\t\tlet input_placeholder = \"\";\n\t\tlet token_balance_input_value = \"\";\n\n\t\tif (tokenSymbol === \"0\") {\n\t\t\tthis.setState({\n\t\t\t\tselectedTokenByUser: false,\n\t\t\t\ttoken_balance_container_class: \"\"\n\t\t\t});\n\t\t\treturn\n\t\t} else {\n\t\t\tif (tokenSymbol === \"all\") {\n\t\t\t\tbutton_text = \"Check\";\n\t\t\t\tbalance_container_input_id = \"token_balance_wallet_address\";\n\t\t\t\tbalance_container_input_type = \"text\";\n\t\t\t\tinput_placeholder = \"Enter BEP-20 Public Wallet Address\";\n\t\t\t\tlet public_wallet_address = Cookies.get('public_wallet_address');\n\t\t\t\tif (public_wallet_address != undefined) {\n\t\t\t\t\ttoken_balance_input_value = public_wallet_address;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbutton_text = \"Calculate\";\n\t\t\t\tbalance_container_input_id = \"token_balance\";\n\t\t\t\tbalance_container_input_type = \"number\";\n\t\t\t\tinput_placeholder = `Enter ${tokenSymbol} Amount`;\n\t\t\t\tlet selected_token_amount = Cookies.get(tokenSymbol+'_token_amount');\n\t\t\t\tif (selected_token_amount != undefined) {\n\t\t\t\t\ttoken_balance_input_value = selected_token_amount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tcheck_balance_button_text: button_text,\n\t\t\t\tcapture_token_balance_container_input_id: balance_container_input_id,\n\t\t\t\tcapture_token_balance_container_input_type: balance_container_input_type,\n\t\t\t\tselectedToken: tokenSymbol,\n\t\t\t\tcapture_token_balance_input_placeholder: input_placeholder,\n\t\t\t\tcapture_token_balance_input_value: token_balance_input_value\n\t\t\t});\n\t\t}\n\t}\n\n\trenderCheckTokenBalancesView = () => {\n\t\tif (this.state.selectedTokenByUser && this.state.selectedToken !== \"0\") {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\n\tlookupBalances = (ev) => {\n\t\t// Reset states\n\t\tthis.setState({\n\t\t\terror_message_class: \"\",\n\t\t\tcheck_balance_button_spinner_class: \"\",\n\t\t\tcheck_balance_button_text_class: \"hide\"\n\t\t});\n\t\t\n\t\tlet promises = [];\n\t\tlet wallet_response = {};\n\t\tlet tokens_to_check = [];\n\t\tlet formated_wallet_address = \"\";\n\n\t\tif (this.state.selectedToken == \"all\") {\n\t\t\tlet wallet_address = this.state.capture_token_balance_input_value;\n\t\t\t// Check to see if the supplied address is valid/invalid\n\t\t\ttry {\n\t\t\t\tformated_wallet_address = web3.utils.toChecksumAddress(wallet_address);\n\t\t\t} catch(err) {\n\t\t\t\tthis.setState({\n\t\t\t\t\ttoken_balance_error_message: \"Supplied wallet address is invalid\",\n\t\t\t\t\terror_message_class: \"show\",\n\t\t\t\t\tcheck_balance_button_spinner_class: \"hide\",\n\t\t\t\t\tcheck_balance_button_text_class: \"\"\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttokens_to_check = tokens;\n\n\t\t\t// Set Public Wallet Address Cookie\n\t\t\tCookies.set('public_wallet_address', formated_wallet_address, {expires: 30, path: '/' });\n\t\t} else {\n\t\t\tfor (const token in tokens) {\n\t\t\t\tif (this.state.selectedToken == tokens[token]['symbol']) {\n\t\t\t\t\ttokens_to_check.push(tokens[token]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const token in tokens_to_check) {\n\t\t\twallet_response[tokens_to_check[token][\"name\"]] = {\n\t\t\t\t'symbol': tokens_to_check[token]['symbol'],\n\t\t\t\t'underlying_asset': tokens_to_check[token]['uasset'],\n\t\t\t\t'decimals': tokens_to_check[token]['decimals'],\n\t\t\t\t'decimal_display': tokens_to_check[token]['decimal_display']\n\t\t\t};\n\t\t\t\n\t\t\tlet contract = new web3.eth.Contract(tokens_to_check[token][\"abi\"], tokens_to_check[token][\"address\"]);\n\n\t\t\t// Lookup / Set token balance depending on selected token\n\t\t\tif (this.state.selectedToken == \"all\") {\n\t\t\t\tlet balance_of = new Promise (function (resolve, reject) {\n\t\t\t\t\tcontract.methods.balanceOf(formated_wallet_address).call({}, function(error, result) {\n\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\treject(error);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tpromises.push(balance_of);\n\t\t\t\tbalance_of.then(\n\t\t\t\t\tdata => {\n\t\t\t\t\t\twallet_response[tokens_to_check[token][\"name\"]]['balance'] = data;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlet token_balance_element = this.state.capture_token_balance_input_value;\n\t\t\t\tlet token_balance = parseInt(token_balance_element);\n\t\t\t\t\n\t\t\t\tif (this.state.selectedToken == 'xUSD') {\n\t\t\t\t\ttoken_balance = web3.utils.toWei(String(token_balance), tokens_to_check[token][\"wei_unit\"]);\n\t\t\t\t\ttoken_balance = parseInt(token_balance);\n\t\t\t\t}\n\n\t\t\t\tif (token_balance <= 0 || isNaN(token_balance)) {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\terror_message_class: \"show\",\n\t\t\t\t\t\ttoken_balance_error_message: \"Token Balance Must Be Greater Than 0\",\n\t\t\t\t\t\tcheck_balance_button_spinner_class: \"hide\",\n\t\t\t\t\t\tcheck_balance_button_text_class: \"show\"\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tCookies.set(this.state.selectedToken+'_token_amount', token_balance_element, {expires: 30, path: '/' });\n\t\t\t\twallet_response[tokens_to_check[token][\"name\"]]['balance'] = token_balance;\n\t\t\t}\n\n\t\t\tlet get_token_price = new Promise (function (resolve, reject) {\n\t\t\t\tcontract.methods.calculatePrice().call({}, function(error, result) {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tpromises.push(get_token_price);\n\t\t\tget_token_price.then(\n\t\t\t\tdata => {\n\t\t\t\t\twallet_response[tokens_to_check[token][\"name\"]]['token_price'] = web3.utils.fromWei(data, tokens_to_check[token][\"wei_unit\"]);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// get price of underlying asset here\n\t\t\tlet base_url = \"https://api.coingecko.com/api/v3/simple/token_price/binance-smart-chain?contract_addresses={contract_address}&vs_currencies=usd\";\n\t\t\tif (tokens_to_check[token]['external_lookup']) {\n \t\t\t\tlet lookup_url = base_url.replace(\"{contract_address}\", tokens_to_check[token][\"uassetaddress\"]);\n \t\t\t\tlet request = fetch(lookup_url).then(response => response.text()).then(\n \t\t\t\t\tdata => {\n \t\t\t\t\t\tlet data_obj = JSON.parse(data);\n\t\t\t\t\t\twallet_response[tokens_to_check[token][\"name\"]]['usd_price'] = data_obj[tokens_to_check[token][\"uassetaddress\"]]['usd'];\n \t\t\t\t\t}\n \t\t\t\t);\n\n\t\t\t\tpromises.push(request);\n\t\t\t} else {\n\t\t\t\tif (tokens_to_check[token]['symbol'] === \"sUSD\" || tokens_to_check[token]['symbol'] === \"xUSD\") {\n\t\t\t\t\twallet_response[tokens_to_check[token][\"name\"]]['usd_price'] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tPromise.allSettled(promises).then(\n\t\t\tresult => {\n\t\t\t\tlet output = [];\n\t\t\t\tfor (const k in wallet_response) {\n\t\t\t\t\tif (wallet_response[k]['balance'] > 0) {\n\t\t\t\t\t\tlet balance = (wallet_response[k]['balance'] / 10**wallet_response[k]['decimals']);\n\t\t\t\t\t\tlet current_ua_amount = (balance * parseFloat(wallet_response[k]['token_price']));\n\t\t\t\t\t\tlet current_value = (balance * parseFloat(wallet_response[k]['token_price']) * parseFloat(wallet_response[k]['usd_price']));\n\t\t\t\t\t\toutput.push({\n\t\t\t\t\t\t\t'name' : k,\n\t\t\t\t\t\t\t'underlying_asset' : wallet_response[k]['underlying_asset'],\n\t\t\t\t\t\t\t'symbol' : wallet_response[k]['symbol'],\n\t\t\t\t\t\t\t'balance' : balance.toLocaleString(undefined, {maximumFractionDigits: 5}),\n\t\t\t\t\t\t\t'underlying_asset_amount' : current_ua_amount.toLocaleString(undefined, {maximumFractionDigits: 5}), \n\t\t\t\t\t\t\t'current_value' : current_value.toLocaleString(undefined, {style: \"currency\", currency: \"USD\"}),\n\t\t\t\t\t\t\t'token_price': wallet_response[k]['token_price']\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.setState({\n\t\t\t\t\ttoken_balance_response: output,\n\t\t\t\t\tcheck_balance_button_spinner_class: \"hide\",\n\t\t\t\t\tcheck_balance_button_text_class: \"\"\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t}\n\n\thandleUserInput = (e) => {\n\t\tthis.setState({\n\t\t\tcapture_token_balance_input_value: e.target.value\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"widget spacerToken tokenList2\">\n\t\t\t\t<div id=\"token_balance_checker_error_container\" class={this.state.error_message_class}>\n\t\t\t\t\t<p id=\"token_balance_checker_error_message\">{this.state.token_balance_error_message}</p>\n\t\t\t\t</div>\n\t\t\t\t<Form.Select className=\"tokenSelect\" onChange={(ev) => this.tokenChange(ev)}>\n\t\t\t\t\t<option value=\"0\" defaultValue>Select a Token</option>\n\t\t\t\t\t<option value=\"all\" defaultValue>Check All Tokens</option>\n\t\t\t\t\t{tokens.map((token) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<option key={token.symbol} value={token.symbol}>{token.name}</option>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</Form.Select>\n\n\t\t\t\t<div class={this.state.token_balance_container_class} id=\"token_balance_container\">\n\t\t\t\t\t{!this.renderCheckTokenBalancesView() ? \"\" :\n\t\t\t\t\t\t<div id=\"capture_token_balance_container\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tclassName=\"capture_token_balance_input\" \n\t\t\t\t\t\t\t\tid={this.state.capture_token_balance_container_input_id}\n\t\t\t\t\t\t\t\tvalue={this.state.capture_token_balance_input_value}\n\t\t\t\t\t\t\t\ttype={this.state.capture_token_balance_container_input_type}\n\t\t\t\t\t\t\t\tplaceholder={this.state.capture_token_balance_input_placeholder}\n\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\tmin=\"1\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div id=\"capture_token_balance_button\" onClick={(ev) => this.lookupBalances(ev)}>\n\t\t\t\t\t\t\t\t<Spinner size=\"sm\" id=\"balance_check_button_spinner\" className={this.state.check_balance_button_spinner_class} animation=\"border\" role=\"status\">\n\t\t\t\t\t\t\t\t\t<span className=\"visually-hidden\">Loading...</span>\n\t\t\t\t\t\t\t\t</Spinner>\n\t\t\t\t\t\t\t\t<span id=\"check_balance_button_text\" class={this.state.check_balance_button_text_class}>\n\t\t\t\t\t\t\t\t\t{this.state.check_balance_button_text}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\n\t\t\t\t\t{!this.state.token_balance_response ? \"\" :\n\t\t\t\t\t\t<div id=\"token_balance_display_container\">\n\t\t\t\t\t\t\t{this.state.token_balance_response.map((token) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div className=\"token_balance_wrapper\">\n\t\t\t\t\t\t\t\t\t\t<fieldset className=\"token_balance_wrapper_fieldset\">\n\t\t\t\t\t\t\t\t\t\t\t<legend align=\"center\">{token.name}</legend>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tCurrent Balance\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_amount\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{token.balance}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_value_ua_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_value_ua_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tCurrent Amount ({token.underlying_asset})\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_amount_ua\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{token.underlying_asset_amount}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_balance_value_usd_wrapper\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_value_usd_header\">\n\t\t\t\t\t\t\t\t\t\t\t\t\tCurrent Value (USD)\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"token_value_usd_amount\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{token.current_value}\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"clear\"></div>\n\t\t\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t<p id=\"token_balance_disclaimer\">*Data provided by BSC and CoinGecko API's</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default TokenBalanceChecker;","/Users/wff/dev/www/xsurge/Webpage-React/components/TokenData.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/components/UpdateCard.js",["108","109","110","111","112"],"import { Component } from 'react';\nimport {Row, Col, Image, Button, Card} from 'react-bootstrap';\nimport '../css/updateCard.module.css'\n\nexport default function UpdateCard() {\n\t\treturn (\n\t\t\t<Card>\n\t\t\t\t<Card.Body>\n\t\t\t\t\t<div className=\"version-tag\">{this.props.version}</div>\n\t\t\t\t\t<Card.Title>{this.props.title}</Card.Title>\n\t\t\t\t\t<Card.Text className=\"truncate\">\n\t\t\t\t\t\t{this.props.desc}\n\t\t\t\t\t</Card.Text>\n\t\t\t\t\t<a href={this.props.filepath} target=\"_blank\"><Button variant=\"primary\">Read</Button></a>\n\t\t\t\t</Card.Body>\n\t\t  </Card>\t\t\n\t\t)\n}\n","/Users/wff/dev/www/xsurge/Webpage-React/components/VSF.js",[],"/Users/wff/dev/www/xsurge/Webpage-React/components/VST.js",["113","114"],"import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport { FaRegCopy, FaCheck } from \"react-icons/fa\";\nimport Image from 'react-bootstrap/Image';\nimport SurgeTokens from './json/surge_tokens.json';\nimport Web3 from 'web3';\nimport {useState, useEffect} from 'react';\nimport {getSurgeTokensData} from './SurgeAssetData.js';\n\nconst web3 = new Web3('https://bsc-dataseed1.binance.org:443');\n\nconst tokens = getSurgeTokensData();\n\nexport default function VST() {\n    /*get token info*/\n    const [selectedToken, setSelectedToken] = useState(tokens[0]);\n    const [selectedTokenByUser, setSelectedTokenByUser] = useState(false);\n    \n    const tokenChange = (e) => {\n        setSelectedTokenByUser(true);\n        let tokenSymbol = e.target.value;\n        if(tokenSymbol === \"0\"){\n            setSelectedTokenByUser(false); return\n        } else {\n            const tokenData = tokens.filter(token => token.symbol === tokenSymbol)[0];\n\n            setSelectedToken(tokenData);\n        }\n        \n    }\n\n    const getTokenPrice = async (tokenABI, tokenAddress, weiUnit) => {\n        const contract = new web3.eth.Contract(tokenABI, tokenAddress);\n        const priceRaw = await contract.methods.calculatePrice().call();\n        const price = web3.utils.fromWei(priceRaw, weiUnit);\n        return price;\n    }\n\n    const getTokenStats = (tokenConfig) => {\n        const promiseArray = tokenConfig.map(async (token) => {\n            const tokenPrice = await getTokenPrice(token.abi, token.address, token.wei_unit);\n            const tokenStats = {\n                name: token.name,\n                symbol: token.symbol,\n                address: token.address,\n                bsc: token.bsc,\n                price: tokenPrice\n            }\n            return tokenStats;\n        })\n        Promise.all(promiseArray).then(results => {\n            // setTokenComponents(results);\n            results.forEach(result=>{\n                tokens.forEach(token=>{\n                    \n                    if(result.symbol === token.symbol) {\n                        token.price = result.price;\n                    }\n                })\n                if(result.symbol === selectedToken.symbol) {\n                    selectedToken.price = result.price;\n                    setSelectedToken(result)\n                }\n            })\n        })\n    }\n\n    useEffect(() => {\n        getTokenStats(tokens);\n    }, [tokens]);\n\n    const addressCopy = function(address) {\n\n        // Copy to clipboard\n        navigator.clipboard.writeText(address);\n\n        // \"Copied\" animation\n        let icon1 = document.querySelector(\"#copy-icon-address\");\n        let icon2 = document.querySelector(\"#copy-icon-okay-address\");\n        icon1.classList.add(\"hidden\");\n        icon2.classList.remove(\"hidden\"); \n        \n        setTimeout(()=>{\n            icon2.classList.add(\"hidden\");\n            icon1.classList.remove(\"hidden\"); \n        }, 2000);\n    }\n\n    const uaddressCopy = function(address) {\n\n        // Copy to clipboard\n        navigator.clipboard.writeText(address);\n\n        // \"Copied\" animation\n        let icon1 = document.querySelector(\"#copy-icon-uaddress\");\n        let icon2 = document.querySelector(\"#copy-icon-okay-uaddress\");\n        icon1.classList.add(\"hidden\");\n        icon2.classList.remove(\"hidden\"); \n        \n        setTimeout(()=>{\n            icon2.classList.add(\"hidden\");\n            icon1.classList.remove(\"hidden\"); \n        }, 2000);\n    }\n    \n    \n\n    return (\n            <div className=\"widget spacerToken tokenList2\">\n                <Form.Select className=\"tokenSelect\" onChange={(ev) => tokenChange(ev)}>\n                    <option value=\"0\" defaultValue>Select a Token</option>\n                    {tokens.map((token) => {\n                        return (\n                            <option key={token.symbol} value={token.symbol}>{token.name}</option>\n                        );\n\n                    })}\n                </Form.Select>\n            \n              {!selectedTokenByUser?\"\":\n            \n                <div className=\"tokenData\">\n                    <div className=\"cValueSpacer\">\n                        <Image src=\"assets/img/dot.png\" className=\"dot\" fluid /> <span className=\"cValueTxt\">Current <span className=\"herospan\"> value:</span></span>\n                    </div>\n                \n                    <table className=\"table table-borderless tokenStatsTable\" cellSpacing=\"0\">\n                        <tbody>\n                            <tr>\n                                <td colSpan=\"3\" className=\"coloredTD\">\n                                    <div className=\"tdLabel tdPrice\">Price</div>\n                                    <div className=\"tdData tdPriceData\">{selectedToken.price}</div>\n                                </td>\n                            </tr>\n                            <tr><td colSpan=\"3\">&nbsp;</td></tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"coloredTD\">\n                                    <div className=\"tdLabel\">Contract Address</div>\n                                    <div className=\"tooltip\">Copied</div>\n                                    <div className=\"tdData\"><FaRegCopy id=\"copy-icon-address\" onClick={() => addressCopy(selectedToken.address)}/>\n                                    <FaCheck id=\"copy-icon-okay-address\" className=\"hidden\" />\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"cAddressData\">\n\t\t\t\t\t\t\t\t\t{selectedToken.address}\n                                </td>\n                            </tr>\n                            <tr><td colSpan=\"3\">&nbsp;</td></tr>\n\t\t\t\t\t\t\t<tr>\n                                <td colSpan=\"3\" className=\"\">\n                                    <div className=\"uLabel\">Fees</div>\n                                </td>\n                            </tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td className=\"tdFee tdFeeFirst\">\n\t\t\t\t\t\t\t\t\t<div className=\"coloredTD tdFeeContainer\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"tdLabel tdFeeLabel\">Buy {selectedToken.fees['stake'] ? '/ Stake' : ''}</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"tdData tdFeeData\">{selectedToken.fees['buy']}% {selectedToken.fees['stake'] ? ' / '+selectedToken.fees['stake']+'%' : ''}</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td className=\"tdFee\">\n\t\t\t\t\t\t\t\t\t<div className=\"coloredTD tdFeeContainer\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"tdLabel tdFeeLabel\">Sell</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"tdData tdFeeData\">{selectedToken.fees['sell']}%</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t<td className=\"tdFee tdFeeLast\">\n\t\t\t\t\t\t\t\t\t<div className=\"coloredTD tdFeeContainer\">\n\t\t\t\t\t\t\t\t\t\t<div className=\"tdLabel tdFeeLabel\">Transfer</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"tdData tdFeeData\">{selectedToken.fees['transfer']}%</div>\n\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr><td colSpan=\"3\">&nbsp;</td></tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"\">\n                                    <div className=\"uLabel\">Underlying Asset</div>\n                                </td>\n\t\t\t\t\t\t\t</tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"coloredTD\">\n                                    <div className=\"tdLabel tdUnderlyingAsset\">{selectedToken.uassetname} ({selectedToken.uassetsymbol})</div>\n                                    <div className=\"tdData\"><FaRegCopy id=\"copy-icon-uaddress\" onClick={() => uaddressCopy(selectedToken.uassetaddress)}/>\n                                    <FaCheck id=\"copy-icon-okay-uaddress\" className=\"hidden\" />\n                                    </div>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"cAddressData\">\n\t\t\t\t\t\t\t\t\t{selectedToken.uassetaddress}\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n           \n                </div>\n            } \n            </div>\n    )\n}",{"ruleId":null,"fatal":true,"severity":2,"message":"115","line":159,"column":96},{"ruleId":"116","severity":1,"message":"117","line":8,"column":8,"nodeType":"118","messageId":"119","endLine":8,"endColumn":27},{"ruleId":"116","severity":1,"message":"120","line":10,"column":19,"nodeType":"118","messageId":"119","endLine":10,"endColumn":28},{"ruleId":"116","severity":1,"message":"121","line":43,"column":7,"nodeType":"118","messageId":"119","endLine":43,"endColumn":33},{"ruleId":"116","severity":1,"message":"122","line":44,"column":7,"nodeType":"118","messageId":"119","endLine":44,"endColumn":35},{"ruleId":"116","severity":1,"message":"123","line":46,"column":7,"nodeType":"118","messageId":"119","endLine":46,"endColumn":32},{"ruleId":"124","severity":1,"message":"125","line":59,"column":30,"nodeType":"126","messageId":"127","endLine":59,"endColumn":32},{"ruleId":"124","severity":1,"message":"128","line":97,"column":39,"nodeType":"126","messageId":"127","endLine":97,"endColumn":41},{"ruleId":"129","severity":1,"message":"130","line":98,"column":5,"nodeType":"131","messageId":"132","endLine":98,"endColumn":48},{"ruleId":"124","severity":1,"message":"128","line":110,"column":31,"nodeType":"126","messageId":"127","endLine":110,"endColumn":33},{"ruleId":"124","severity":1,"message":"128","line":114,"column":33,"nodeType":"126","messageId":"127","endLine":114,"endColumn":35},{"ruleId":"133","severity":1,"message":"134","line":16,"column":8,"nodeType":"135","messageId":"136","endLine":16,"endColumn":60,"fix":"137"},{"ruleId":"133","severity":1,"message":"134","line":19,"column":8,"nodeType":"135","messageId":"136","endLine":19,"endColumn":67,"fix":"138"},{"ruleId":"133","severity":1,"message":"134","line":22,"column":8,"nodeType":"135","messageId":"136","endLine":22,"endColumn":65,"fix":"139"},{"ruleId":"133","severity":1,"message":"134","line":25,"column":8,"nodeType":"135","messageId":"136","endLine":25,"endColumn":66,"fix":"140"},{"ruleId":"133","severity":1,"message":"134","line":28,"column":8,"nodeType":"135","messageId":"136","endLine":28,"endColumn":58,"fix":"141"},{"ruleId":"133","severity":1,"message":"134","line":31,"column":8,"nodeType":"135","messageId":"136","endLine":31,"endColumn":77,"fix":"142"},{"ruleId":"143","severity":1,"message":"144","line":42,"column":58,"nodeType":"145","messageId":"146","endLine":42,"endColumn":85},{"ruleId":"143","severity":1,"message":"144","line":46,"column":58,"nodeType":"145","messageId":"146","endLine":46,"endColumn":85},{"ruleId":"116","severity":1,"message":"147","line":8,"column":8,"nodeType":"118","messageId":"119","endLine":8,"endColumn":13},{"ruleId":"124","severity":1,"message":"128","line":42,"column":43,"nodeType":"126","messageId":"127","endLine":42,"endColumn":45},{"ruleId":"124","severity":1,"message":"128","line":63,"column":42,"nodeType":"126","messageId":"127","endLine":63,"endColumn":44},{"ruleId":"116","severity":1,"message":"148","line":2,"column":8,"nodeType":"118","messageId":"119","endLine":2,"endColumn":16},{"ruleId":"116","severity":1,"message":"149","line":7,"column":8,"nodeType":"118","messageId":"119","endLine":7,"endColumn":14},{"ruleId":"124","severity":1,"message":"125","line":65,"column":31,"nodeType":"126","messageId":"127","endLine":65,"endColumn":33},{"ruleId":"124","severity":1,"message":"125","line":74,"column":31,"nodeType":"126","messageId":"127","endLine":74,"endColumn":33},{"ruleId":"124","severity":1,"message":"128","line":111,"column":32,"nodeType":"126","messageId":"127","endLine":111,"endColumn":34},{"ruleId":"124","severity":1,"message":"128","line":131,"column":34,"nodeType":"126","messageId":"127","endLine":131,"endColumn":36},{"ruleId":"124","severity":1,"message":"128","line":148,"column":33,"nodeType":"126","messageId":"127","endLine":148,"endColumn":35},{"ruleId":"124","severity":1,"message":"128","line":168,"column":34,"nodeType":"126","messageId":"127","endLine":168,"endColumn":36},{"ruleId":"116","severity":1,"message":"150","line":1,"column":10,"nodeType":"118","messageId":"119","endLine":1,"endColumn":19},{"ruleId":"116","severity":1,"message":"151","line":2,"column":9,"nodeType":"118","messageId":"119","endLine":2,"endColumn":12},{"ruleId":"116","severity":1,"message":"152","line":2,"column":14,"nodeType":"118","messageId":"119","endLine":2,"endColumn":17},{"ruleId":"116","severity":1,"message":"147","line":2,"column":19,"nodeType":"118","messageId":"119","endLine":2,"endColumn":24},{"ruleId":"133","severity":1,"message":"134","line":14,"column":6,"nodeType":"135","messageId":"136","endLine":14,"endColumn":52,"fix":"153"},{"ruleId":"116","severity":1,"message":"154","line":5,"column":8,"nodeType":"118","messageId":"119","endLine":5,"endColumn":19},{"ruleId":"155","severity":1,"message":"156","line":70,"column":8,"nodeType":"157","endLine":70,"endColumn":16,"suggestions":"158"},"Parsing error: Unexpected token, expected \"}\"\n\n\u001b[0m \u001b[90m 157 |\u001b[39m                             \u001b[33m<\u001b[39m\u001b[33mh1\u001b[39m className\u001b[33m=\u001b[39m{styles\u001b[33m.\u001b[39mheroH1}\u001b[33m>\u001b[39m\u001b[33mSix\u001b[39m tokens \u001b[36mfor\u001b[39m you to\u001b[33m<\u001b[39m\u001b[33mbr\u001b[39m\u001b[35m/>invest and start<br/\u001b[39m\u001b[33m>\u001b[39mearning\u001b[33m.\u001b[39m\u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mh1\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 158 |\u001b[39m                         \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mCol\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 159 |\u001b[39m                         \u001b[33m<\u001b[39m\u001b[33mCol\u001b[39m xs\u001b[33m=\u001b[39m{\u001b[35m12\u001b[39m} sm\u001b[33m=\u001b[39m{\u001b[35m12\u001b[39m} md\u001b[33m=\u001b[39m{\u001b[35m7\u001b[39m} lg\u001b[33m=\u001b[39m{\u001b[35m7\u001b[39m} xl\u001b[33m=\u001b[39m{\u001b[35m7\u001b[39m} className\u001b[33m=\u001b[39m{styles\u001b[33m.\u001b[39mapp1_image app1_image_right}\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m     |\u001b[39m                                                                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 160 |\u001b[39m                             \u001b[33m<\u001b[39m\u001b[33mImage\u001b[39m src\u001b[33m=\u001b[39m\u001b[32m\"assets/img/surge_tokens_horizontal.png\"\u001b[39m className\u001b[33m=\u001b[39m{styles\u001b[33m.\u001b[39mapp1Img} fluid \u001b[33m/\u001b[39m\u001b[33m>\u001b[39m     \u001b[0m\n\u001b[0m \u001b[90m 161 |\u001b[39m                         \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mCol\u001b[39m\u001b[33m>\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 162 |\u001b[39m                     \u001b[33m<\u001b[39m\u001b[33m/\u001b[39m\u001b[33mRow\u001b[39m\u001b[33m>\u001b[39m\u001b[0m","no-unused-vars","'TokenBalanceChecker' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'balance_container_input_id' is assigned a value but never used.","'balance_container_input_type' is assigned a value but never used.","'token_balance_input_value' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"159","text":"160"},{"range":"161","text":"160"},{"range":"162","text":"160"},{"range":"163","text":"160"},{"range":"164","text":"160"},{"range":"165","text":"160"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Image' is defined but never used.","'ReactDOM' is defined but never used.","'Button' is defined but never used.","'Component' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.",{"range":"166","text":"160"},"'SurgeTokens' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTokenStats'. Either include it or remove the dependency array. Outer scope values like 'tokens' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["167"],[651,651]," rel=\"noreferrer\"",[827,827],[978,978],[1128,1128],[1269,1269],[1431,1431],[453,453],{"desc":"168","fix":"169"},"Update the dependencies array to be: [getTokenStats]",{"range":"170","text":"171"},[2407,2415],"[getTokenStats]"]